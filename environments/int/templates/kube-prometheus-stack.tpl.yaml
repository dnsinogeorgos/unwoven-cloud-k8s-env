# https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
#
# https://github.com/prometheus-community/helm-charts/blob/main/charts/alertmanager/values.yaml
alertmanager:
  alertmanagerSpec:
    retention: 168h
    storage:
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 200Gi
          storageClassName: efs-sc
  ingress:
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-secret: ${secret_name}
      nginx.ingress.kubernetes.io/auth-realm: Alert Manager - Authentication required
    enabled: true
    hosts:
      - alertmanager.${zone_name}
    path: /
    pathType: Prefix
    tls:
      - hosts:
          - alertmanager.${zone_name}
        secretName: alertmanager-tls
# https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
grafana:
  defaultDashboardsEnabled: true
  enabled: false
  forceDeployDashboards: true
  forceDeployDatasources: true
# https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus/values.yaml
prometheus:
  ingress:
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-secret: ${secret_name}
      nginx.ingress.kubernetes.io/auth-realm: Prometheus - Authentication required
    enabled: true
    hosts:
      - prometheus.${zone_name}
    path: /
    pathType: Prefix
    tls:
      - hosts:
          - prometheus.${zone_name}
        secretName: prometheus-tls
  prometheusSpec:
    retention: 30d
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 200Gi
          storageClassName: efs-sc
    thanos:
      objectStorageConfig:
        key: thanos-storage-config.yaml
        name: thanos-storage-config
  server:
    podAnnotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
  serviceAccount:
    annotations:
      eks.amazonaws.com/role-arn: ${sa_role_arn}
    name: ${sa_name}
  thanosService:
    enabled: true
prometheusOperator:
  thanosImage:
    repository: docker.io/raspbernetes/thanos
    tag: v0.22.0
